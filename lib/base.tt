
# The identity function of types of type *, as well as its type.
let idT = @a : *. a -> a
let id = \a : *. \x : a. x

# A version of id used to identify the return type.
let ret = id

let const = \a : *. \x : a. \b : *. \_ : b. x

let comp = \a : *. \b : *. \c : *. \f : (b -> c). \g : (a -> b).
  \x : a. f (g x)


let bot = @a : *. a

let not = \a : *. @x : a. bot

let unitT = idT
let unit = id


let bool = @r : *. r -> r -> r
let false = \r : *. \x : r. \y : r. x
let true = \r : *. \x : r. \y : r. y


let sum = \a : *. \b : *. (@r : *. @f : (a -> r). @g : (b -> r). r)

let injL = \a : *. \b : *. \x : a. ret (sum a b)
  (\r : *. \f : (a -> r). \g : (b -> r). f x)

let injR = \a : *. \b : *. \y : b. ret (sum a b)
  (\r : *. \f : (a -> r). \g : (b -> r). g y)


let sigmaT = \a : *. \P : (a -> *). (@r : *. @f : (@x : a. (P x) -> r). r)

let sigma = \a : *. \P : (@x : a. *). \x : a. \y : (P x). ret (sigmaT a P)
  (\r : *. \f : (@x : a. (P x) -> r). f x y)


let pairT = \a : *. \b : *. sigmaT a (\_ : a. b)

let pair = \a : *. \b : *. \x : a. \y : b. ret (pairT a b)
  (sigma a (\_ : a. b) x y)


# The identity type, which represents propositional equality.
let I = \a : *. \x : a. \y : a.
  (@P : (a -> *). (P x) -> (P y))

let refl = \a : *. \x : a. ret (I a x x)
  (\P : (a -> *). \p : (P x). p)

# Proof that if x = y, then y = x.
let sym = \a : *. \x : a. \y : a. \eq : (I a x y). ret (I a y x)
  (eq (\xp : a. I a xp x) (refl a x))

# Proof that if x = y and y = z, then x = z.
let trans = \a : *. \x : a. \y : a. \z : a.
  \eqXY : (I a x y). \eqYZ : (I a y z). ret (I a x z)
    (eqYZ (\yp : a. I a x yp) eqXY)

# Proof that if x = y, then f x = f y.
let cong = \a : *. \b : *. \x : a. \y : a. \f : (@x : a. b).
  \eq : (I a x y). ret (I b (f x) (f y))
    (eq (\xp : a. I b (f x) (f xp)) (refl b (f x)))


# The identity type for types.
# TODO: Define sym, trans, and cong.
let IT = \x : *. \y : *.
  (@P : (* -> *). (P x) -> (P y))

let reflT = \x : *. ret (IT x x)
  (\P : (* -> *). \p : (P x). p)

let symT = \a : *. \b : *. \eq : (IT a b). ret (IT b a)
  (eq (\ap : *. IT ap a) (reflT a))

let transT = \a : *. \b : *. \c : *.
  \eqAB : (IT a b). \eqBC : (IT b c). ret (IT a c)
    (eqBC (\bp : *. IT a bp) eqAB)

let congT = \a : *. \b : *. \P : (* -> *).
  \eq : (IT a b). ret (IT (P a) (P b))
    (eq (\ap : *. IT (P a) (P ap)) (reflT (P a)))

## Proof that if a = b and x : a, then x : b.
let typeConv = \a : *. \b : *. \eq : (IT a b). ret (a -> b)
  (eq (\ap : *. (a -> ap)) (id a))
