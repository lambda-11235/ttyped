
# The identity function of types of type *, as well as its type.
idT = (@a : *. (@x : a. a))
id = (\a : *. (\x : a. x))

const = (\a : *. (\x : a. (\b : *. (\y : b. x))))

comp = (\a : *. (\b : *. (\c : *. (\f : (@x : b. c). (\g : (@x : a. b).
  (\x : a. (f (g x))))))))


botT = (@a : *. a)

not = (\a : *. (@x : a. botT))

unitT = idT
unit = id


boolT = (@r : *. (@x : r. (@y : r. r)))
false = (\r : *. (\x : r. (\y : r. x)))
true = (\r : *. (\x : r. (\y : r. y)))


sumT = (\a : *. (\b : *. (@r : *. (@f : (@x : a. r). (@g : (@y : b. r). r)))))

injL = (\a : *. (\b : *. (\x : a. ((id ((sumT a) b))
  (\r : *. (\f : (@x : a. r). (\g : (@y : b. r). (f x))))))))

injR = (\a : *. (\b : *. (\y : b. ((id ((sumT a) b))
  (\r : *. (\f : (@x : a. r). (\g : (@y : b. r). (g y))))))))


sigmaT = (\a : *. (\P : (@x : a. *). (@r : *. (@f : (@x : a. (@y : (P x). r)). r))))

sigma = (\a : *. (\P : (@x : a. *). (\x : a. (\y : (P x). ((id ((sigmaT a) P))
  (\r : *. (\f : (@x : a. (@y : (P x). r)). ((f x) y))))))))


pairT = (\a : *. (\b : *. ((sigmaT a) (\x : a. b))))

pair = (\a : *. (\b : *. (\x : a. (\y : b. ((id ((pairT a) b))
  ((((sigma a) (\x : a. b)) x) y))))))


# Well founded types.
W = (\a : *. (\b : (@x : a. *).
  (@r : *.
    (@f : (@x : a. (@y : (@sel : (b x). r). r)).
      r))))

sup = (\a : *. (\b : (@x : a. *). (\x : a. (\y : (@r : *. (@sel : (b x). r)).
  ((id ((W a) b))
    (\r : *. (\f : (@x : a. (@y : (@sel : (b x). r). r)).
      ((f x) (y r)))))))))
