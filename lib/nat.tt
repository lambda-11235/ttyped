# Depends on base.tt.

# Natural numbers.

let nat = @r : *. (r -> r) -> r -> r

let zero = ret nat
  (\r : *. \f : (r -> r). \x : r. x)

let succ = \n : nat. ret nat
  (\r : *. \f : (r -> r). \x : r. f (n r f x))

let isZero = \n : nat. ret bool (n bool (\_ : bool. false) true)
let isSucc = \n : nat. ret bool (n bool (\_ : bool. true) false)

let one = succ zero
let two = succ one
let three = succ two
let four = succ three
let five = succ four
let six = succ five
let seven = succ six
let eight = succ seven
let nine = succ eight
let ten = succ nine


let add = \n : nat. \m : nat. ret nat
  (n nat succ m)

let mult = \n : nat. \m : nat. ret nat
  (n nat (add m) zero)

let power = \n : nat. \m : nat. ret nat
  (m nat (mult n) one)


let PNT = pairT nat nat
let PN = pair nat nat

# What I'm doing here is passing along a pair with (n, m) that starts at (0, 0).
# On each iteration we convert it to (n + 1, n). At the end of the iterations we
# should have (x, p), where x is the passed in number and p is its predecessor.
# Returns 0 when 0 is used as an argument.
let pred = \n : nat. ret nat
  ((n PNT
      (\pnt : PNT. (pnt PNT
        (\next : nat. \prev : nat.
          PN (succ next) next)))
      (PN zero zero))
    nat
    (\next : nat. \prev : nat. prev))

# The subtraction function. if m < n then m - n = 0.
let sub = \n : nat. \m : nat. ret nat
  (m nat pred n)


# n > m, n < m, and n = m, respectively.
let greaterThan = \n : nat. \m : nat. ret bool (isSucc (sub n m))
let lessThan = \n : nat. \m : nat. greaterThan m n
let equal = \n : nat. \m : nat. bnot (bor (greaterThan n m) (lessThan n m))


# Returns a pair of the quotient and remainder, respectively, of the division of
# n by m.
let divRem = \n : nat. \m : nat. ret PNT
  (n PNT
    (\pnt : PNT. pnt PNT (\q : nat. \r : nat.
      (lessThan (succ r) m) PNT (PN (succ q) zero) (PN q (succ r))))
    (PN zero zero))


# Computes the factorial of a natural number.
let fact = \n : nat. ret nat
  ((n PNT
      (\pnt : PNT. pnt PNT
        (\fac : nat. \m : nat.
          PN (mult fac m) (succ m)))
      (PN one one))
   nat
   (\fac : nat. \m : nat. fac))


##### Proofs

# Proof that if n = m, then succ n = succ m.
let succEq = \n : nat. \m : nat. \eq : (I nat n m). ret (I nat (succ n) (succ m))
  (cong nat nat n m succ eq)
