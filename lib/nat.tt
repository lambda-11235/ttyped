
# Natural numbers.

natType = (@r : *. (@f : (@x : r. r). (@x : r. r)))

zero = (\r : *. (\f : (@x : r. r). (\x : r. x)))
succ = (\n : natType. (\r : *. (\f : (@x : r. r). (\x : r. (f (((n r) f) x))))))

one = (succ zero)
two = (succ one)
three = (succ two)
four = (succ three)
five = (succ four)
six = (succ five)
seven = (succ six)
eight = (succ seven)
nine = (succ eight)
ten = (succ nine)


add = (\n : natType. (\m : natType. (\r : *. (\f : (@x : r. r). (\x : r.
 (((n r) f) (((m r) f) x)))))))

mult = (\n : natType. (\m : natType. (((n natType) (add m)) zero)))

power = (\n : natType. (\m : natType. (((m natType) (mult n)) one)))


# What I'm doing here is passing along a pair with (n, m) that starts at (0, 0).
# On each iteration we convert it to (n + 1, n). At the end of the iterations we
# should have (x, p), where x is the passed in number and p is its predecessor.
PNT = ((pairType natType) natType)
PN = ((pair natType) natType)
pred = (\n : natType. (
  ((((n PNT)
    (\pnt : PNT. ((pnt PNT) (\next : natType. (\prev : natType.
      ((PN (succ next)) next))))))
    ((PN zero) zero))
    natType)
  (\next : natType. (\prev : natType. prev))))
